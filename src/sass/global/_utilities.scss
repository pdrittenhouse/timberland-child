// Breakout Contaner Single Side
.breakout-right {

  @each $name, $width in $container-max-widths {
      @if $name =='sm' {
          @include media-breakpoint-down($name) {
              width: calc(100% + (100vw - #{$width}) + #{$grid-gutter-width});
              margin-left: calc(((100vw - #{$width}) / -2) - (#{$grid-gutter-width} / 2));
          }
      }

      @else {
          @include media-breakpoint-up($name) {
              width: calc(100% + ((100vw - #{$width}) / 2) + (#{$grid-gutter-width} / 2));
              margin-right: calc(((100vw - #{$width}) / -2) - (#{$grid-gutter-width} / 2));
          }
      }
  }
}

.breakout-left {

  @each $name, $width in $container-max-widths {
      @if $name =='sm' {
          @include media-breakpoint-down($name) {
              width: calc(100% + (100vw - #{$width}) + #{$grid-gutter-width});
              margin-right: calc(((100vw - #{$width}) / -2) - (#{$grid-gutter-width} / 2));
          }
      }

      @else {
          @include media-breakpoint-up($name) {
              width: calc(100% + ((100vw - #{$width}) / 2) + (#{$grid-gutter-width} / 2));
              margin-left: calc(((100vw - #{$width}) / -2) - (#{$grid-gutter-width} / 2));
          }
      }
  }
}

// Overflow
.overflow-hidden {
  overflow: hidden;

  .block-section--wrapper {

      >.container {
          overflow: hidden;
      }
  }
}

.overflow-visible {
  overflow: visible;

  .block-section--wrapper {

      >.container {
          overflow: visible;
      }
  }
}

.overflow-auto {
  overflow: auto;

  .block-section--wrapper {

      >.container {
          overflow: auto;
      }
  }
}

.overflow-scroll {
  overflow: scroll;

  .block-section--wrapper {

      >.container {
          overflow: scroll;
      }
  }
}

.overflow-x-hidden {
  overflow-x: hidden;

  .block-section--wrapper {

      >.container {
          overflow-x: hidden;
      }
  }
}

.overflow-x-visible {
  overflow-x: visible;

  .block-section--wrapper {

      >.container {
          overflow-x: visible;
      }
  }
}

.overflow-x-auto {
  overflow-x: auto;

  .block-section--wrapper {

      >.container {
          overflow-x: auto;
      }
  }
}

.overflow-x-scroll {
  overflow-x: scroll;

  .block-section--wrapper {

      >.container {
          overflow-x: scroll;
      }
  }
}

.overflow-y-hidden {
  overflow-y: hidden;

  .block-section--wrapper {

      >.container {
          overflow-y: hidden;
      }
  }
}

.overflow-y-visible {
  overflow-y: visible;

  .block-section--wrapper {

      >.container {
          overflow-y: visible;
      }
  }
}

.overflow-y-auto {
  overflow-y: auto;

  .block-section--wrapper {

      >.container {
          overflow-y: auto;
      }
  }
}

.overflow-y-scroll {
  overflow-y: scroll;

  .block-section--wrapper {

      >.container {
          overflow-y: scroll;
      }
  }
}

.container-overflow-hidden {

  .container,
  .container-fluid {
      overflow: hidden;
  }
}

// Container Padding
.wide-container-padding {

  .container,
  .container-fluid,
  [class*="--container"] {
      /* stylelint-disable */
      padding-left: calc(24px + (var(--bs-gutter-x) / 2)) !important;
      padding-right: calc(24px + (var(--bs-gutter-x) / 2)) !important;
      // padding-left: rem-calc(24px) !important;
      // padding-right: rem-calc(24px) !important;
      /* stylelint-enable */

      @include media-breakpoint-up(md) {
          /* stylelint-disable */
          padding-left: calc(60px + (var(--bs-gutter-x) / 2)) !important;
          padding-right: calc(60px + (var(--bs-gutter-x) / 2)) !important;
          // padding-left: rem-calc(60px) !important;
          // padding-right: rem-calc(60px) !important;
          /* stylelint-enable */
      }

      // @include media-breakpoint-between(md, xxl) {
      //     /* stylelint-disable */
      //     padding-left: calc(60px + (var(--bs-gutter-x) / 2)) !important;
      //     padding-right: calc(60px + (var(--bs-gutter-x) / 2)) !important;
      //     // padding-left: rem-calc(60px) !important;
      //     // padding-right: rem-calc(60px) !important;
      //     /* stylelint-enable */
      // }

      // @include media-breakpoint-up(xxl) {
      //     /* stylelint-disable */
      //     padding-left: calc(120px + (var(--bs-gutter-x) / 2)) !important;
      //     padding-right: calc(120px + (var(--bs-gutter-x) / 2)) !important;
      //     // padding-left: rem-calc(120px) !important;
      //     // padding-right: rem-calc(120px) !important; 
      //     /* stylelint-enable */
      // }
  }
}

// Add Wide Padding
.add-wide-padding {

  /* stylelint-disable */
  padding-left: calc(24px + (var(--bs-gutter-x) / 2)) !important;
  padding-right: calc(24px + (var(--bs-gutter-x) / 2)) !important;
  // padding-left: rem-calc(24px) !important;
  // padding-right: rem-calc(24px) !important;
  /* stylelint-enable */

  @include media-breakpoint-up(md) {
      /* stylelint-disable */
      padding-left: calc(60px + (var(--bs-gutter-x) / 2)) !important;
      padding-right: calc(60px + (var(--bs-gutter-x) / 2)) !important;
      // padding-left: rem-calc(60px) !important;
      // padding-right: rem-calc(60px) !important;
      /* stylelint-enable */
  }

  // @include media-breakpoint-between(md, xxl) {
  //     /* stylelint-disable */
  //     padding-left: calc(60px + (var(--bs-gutter-x) / 2)) !important;
  //     padding-right: calc(60px + (var(--bs-gutter-x) / 2)) !important;
  //     // padding-left: rem-calc(60px) !important;
  //     // padding-right: rem-calc(60px) !important;
  //     /* stylelint-enable */
  // }

  // @include media-breakpoint-up(xxl) {
  //     /* stylelint-disable */
  //     padding-left: calc(120px + (var(--bs-gutter-x) / 2)) !important;
  //     padding-right: calc(120px + (var(--bs-gutter-x) / 2)) !important;
  //     // padding-left: rem-calc(120px) !important;
  //     // padding-right: rem-calc(120px) !important; 
  //     /* stylelint-enable */
  // }
}

.secondary-sticky-menu {

  @include media-breakpoint-up(xl) {
      position: sticky;
      // top: rem-calc(75px);
      // top: rem-calc(107px);
      // top: rem-calc(96.3px);
      top: rem-calc(98px);
      left: 0;
      right: 0;
      z-index: z('site-content');
  }

  .logged-in & {

      @include media-breakpoint-up(xl) {
          // top: rem-calc(107px);
      }
  }
}

// Z Index
@each $index in $z-indexes {
.z-#{$index} {
  z-index: z(#{$index}) !important;
}
}

// Font Weights

.fw-100 {
  font-weight: 100 !important;
}

.fw-200 {
  font-weight: 200 !important;
}

.fw-300 {
  font-weight: 300 !important;
}

.fw-400 {
  font-weight: 400 !important;
}

.fw-500 {
  font-weight: 500 !important;
}

.fw-600 {
  font-weight: 600 !important;
}

.fw-700 {
  font-weight: 700 !important;
}

.fw-800 {
  font-weight: 800 !important;
}

.fw-900 {
  font-weight: 900 !important;
}

// Bootstrap Utility overrides
.display-1 {}

.display-2 {}

.display-3 {}

.display-4 {}

.display-5 {}

.display-6 {}


// CSS Columns
.css-cols-2 {

  @include media-breakpoint-up (lg) {
      @include css-columns(2, auto);
      @include css-column-gap(24px);
      @include css-break-inside(avoid-column);
  }
}

.css-cols-3 {

  @include media-breakpoint-between (lg, xl) {
      @include css-columns(2, auto);
      @include css-column-gap(24px);
      @include css-break-inside(avoid-column);
  }

  @include media-breakpoint-up (xl) {
      @include css-columns(3, auto);
      @include css-column-gap(24px);
      @include css-break-inside(avoid-column);
  }
}

.css-cols-4 {

  @include media-breakpoint-between (lg, xl) {
      @include css-columns(2, auto);
      @include css-column-gap(24px);
      @include css-break-inside(avoid-column);
  }

  @include media-breakpoint-up (xl) {
      @include css-columns(4, auto);
      @include css-column-gap(24px);
      @include css-break-inside(avoid-column);
  }
}

.css-cols-5 {

  @include media-breakpoint-between (lg, xl) {
      @include css-columns(2, auto);
      @include css-column-gap(24px);
      @include css-break-inside(avoid-column);
  }

  @include media-breakpoint-between (xl, xxxl) {
      @include css-columns(4, auto);
      @include css-column-gap(24px);
      @include css-break-inside(avoid-column);
  }

  @include media-breakpoint-up (xxxl) {
      @include css-columns(5, auto);
      @include css-column-gap(24px);
      @include css-break-inside(avoid-column);
  }
}

.css-cols-6 {

  @include media-breakpoint-between (lg, xl) {
      @include css-columns(2, auto);
      @include css-column-gap(24px);
      @include css-break-inside(avoid-column);
  }

  @include media-breakpoint-between (xl, xxxl) {
      @include css-columns(4, auto);
      @include css-column-gap(24px);
      @include css-break-inside(avoid-column);
  }

  @include media-breakpoint-up (xxxl) {
      @include css-columns(6, auto);
      @include css-column-gap(24px);
      @include css-break-inside(avoid-column);
  }
}

// Hide backgoround image
.bg-none  {
  background-image: none !important;
}

@each $name, $width in $grid-breakpoints {
  .bg-#{$name}-none {
      @include media-breakpoint-up($name) {
          background-image: none !important;
      }
  }
  .bg-#{$name}-none-max {
      @include media-breakpoint-down($name) {
          background-image: none !important;
      }
  }
}

// Background Colors
@each $name, $variantList in $c-palette {
@each $variant, $color in $variantList {
  @if ($variant == 'base') {
    .bg-#{"#{$name}"} {
      background-color: $color;
    }
  } @else {
    .bg-#{"#{$name}"}-#{$variant} {
      background-color: $color;
    }
  }
}
}

// Responsive font size
@for $i from 1 through 6 {
  .font-size-#{$i} {
      font-size: var(--h#{$i}-font-size) !important;
  }
}
@each $name, $width in $grid-breakpoints {
  @for $i from 1 through 6 {
      .font-size-#{$name}-#{$i} {
          @include media-breakpoint-up($name) {
              font-size: var(--h#{$i}-font-size) !important;
          }
      }
  }
}

// Rotate 
$degs: (
  0,
  45,
  90,
  135,
  180,
  225,
  270,
  315,
  360
);
@each $deg in $degs {
  .rotate-#{$deg} {
      transform: rotate(#{$deg}deg);
  }
}
@each $name, $width in $grid-breakpoints {
  @each $deg in $degs {
      .rotate-#{$name}-#{$deg} {
          
          @include media-breakpoint-up($name) {
              transform: rotate(#{$deg}deg);
          }
      }
  }
}
@each $name, $width in $grid-breakpoints {
  @each $deg in $degs {
      .rotate-#{$name}-max-#{$deg} {

          @include media-breakpoint-down($name) {
              transform: rotate(#{$deg}deg);
          }
      }
  }
}

// Widths
$widths: (
  0,
  25,
  50,
  75,
  100,
);

.w-0 {
  width: 0;
}

@each $name, $width in $grid-breakpoints {
  @each $size in $widths {
      .w-#{$name}-#{$size} {

          @include media-breakpoint-up($name) {
              width: #{$size + '%'};
          }
      }
  }
}

@each $name, $width in $grid-breakpoints {
  @each $size in $widths {
      .w-#{$name}-max-#{$size} {

          @include media-breakpoint-down($name) {
              width: #{$size + '%'};
          }
      }
  }
}

// Min widths
@each $size in $widths {
  .min-w-#{$size} {
      min-width: #{$size + '%'};
  }
}

@each $name, $width in $grid-breakpoints {
  @each $size in $widths {
      .min-w-#{$name}-#{$size} {

          @include media-breakpoint-up($name) {
              min-width: #{$size + '%'};
          }
      }
  }
}

@each $name, $width in $grid-breakpoints {
  @each $size in $widths {
      .min-w-#{$name}-max-#{$size} {

          @include media-breakpoint-down($name) {
              min-width: #{$size + '%'};
          }
      }
  }
}

// Max widths
@each $size in $widths {
  .max-w-#{$size} {
      max-width: #{$size + '%'};
  }
}

@each $name, $width in $grid-breakpoints {
  @each $size in $widths {
      .max-w-#{$name}-#{$size} {

          @include media-breakpoint-up($name) {
              max-width: #{$size + '%'};
          }
      }
  }
}

@each $name, $width in $grid-breakpoints {
  @each $size in $widths {
      .max-w-#{$name}-max-#{$size} {

          @include media-breakpoint-down($name) {
              max-width: #{$size + '%'};
          }
      }
  }
}
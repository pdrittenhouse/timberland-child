/* stylelint-disable */

//Clearfix
@mixin clearfix(){
  &:before,
  &:after{
    content: " ";
    display: table;
  }

  &:after{
    display: block;
    clear: both;
    height: 1px;
    margin-top: -1px;
    visibility: hidden;
  }
  &{
    *zoom: 1;
  }
}
%clearfix {
  @include clearfix;
}


//Screenreaders Only
@mixin sr-only {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  width: 1px;
  position: absolute !important;
  word-wrap: normal;
}
@mixin sr-only-focusable {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
  &:focus{
    position: static !important;
    clip: auto;
    overflow: visible;
    height: auto;
  }
}


//Hide Element
//Hides visually, still seen by screen readers
@mixin hide {
  visibility: hidden;
  opacity: 0;
}


//Show Element
@mixin show {
  visibility: visible;
  opacity: 1;
}


//Remove Element
//Removes element from DOM flow
@mixin remove {
  visibility: hidden;
  display: none;
}

// Appearance
@mixin disappear {
  -webkit-appearance: none;
  appearance: none;
}

//Replace Element
@mixin replace($display: initial) {
  visibility: visible;
  display: $display;
}


//Move Offscreen
@mixin offscreen {
  position: absolute;
  clip: rect(1px 1px 1px 1px); /* for Internet Explorer */
  clip: rect(1px, 1px, 1px, 1px);
  padding: 0;
  border: 0;
  height: 1px;
  width: 1px;
  overflow: hidden;
}


// Absolute Center
// Center an element vertically or horizontally in its container,
// and optionally horizontally. Option to undo.
// @param $horizontally-center - center horizontally
// @param $vertically-center - center vertically
// @param $absolute - position absolutely, rather than relatively
// @param $setDisplay - set display to inline block [default]
// @param $undo - undo vertical centering on an element it was previously applied to
@mixin absolute-center($horizontally: true, $vertically: true, $absolute: false, $setDisplay: true, $undo: false) {

  @if ($setDisplay == true) {
    display: inline-block;
  }

  @if ($absolute) {
    position: absolute;
  } @else {
    position: relative;
  }

  @if ($horizontally == true and $vertically == true) {
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
  }

  @if ($vertically == true and $horizontally == false) {
    top: 50%;
    transform: translateY(-50%);
  }

  @if ($horizontally == true and $vertically == false) {
    left: 50%;
    transform: translateX(-50%);
  }

  @if ($undo) {
    position: static;
    left: auto;
    top: auto;
    transform: none;
  }
}

// Absolute Position
// Position an element to the top, bottom, left or right of its container,
// @param $position - position of element: 'top', 'bottom', 'left', 'right'
// @param $alignment - position in relation to parent container: 'inside', 'outside'
// @param $undo - undo positioning on an element it was previously applied to
@mixin absolute-position($position: 'top', $alignment: 'inside', $undo: false) {
  position: absolute;

  @if ($position == 'top') {
    left: 0;
    right: 0;

    @if ($alignment == 'inside') {
      top: 0;
      bottom: auto;
    }

    @if ($alignment == 'outside') {
      top: auto;
      bottom: 100%;
    }
  }

  @if ($position == 'bottom') {
    left: 0;
    right: 0;

    @if ($alignment == 'inside') {
      top: auto;
      bottom: 0;
    }

    @if ($alignment == 'outside') {
      top: 100%;
      bottom: auto;
    }
  }

  @if ($position == 'left') {
    top: 0;
    bottom: 0;

    @if ($alignment == 'inside') {
      left: 0;
      right: auto;
    }

    @if ($alignment == 'outside') {
      left: auto;
      right: 100%;
    }
  }

  @if ($position == 'right') {
    top: 0;
    bottom: 0;

    @if ($alignment == 'inside') {
      left: auto;
      right: 0;
    }

    @if ($alignment == 'outside') {
      left: 100%;
      right: auto;
    }
  }

  @if ($undo) {
    top: auto;
    bottom: auto;
    left: auto;
    right: auto;
    position: static;
  }
}

//Cover Element
@mixin cover {
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
}

//Cover Image
@mixin cover-image($position: 50% 50%) {
  width: auto;
  height: auto;
  min-height: 100%;
  min-width: 100%;
  object-fit: cover;
  object-position: $position;
}

@mixin cover-image-max($position: 50% 50%) {
  width: 100%;
  height: 100%;
  object-fit: cover;
  object-position: $position;
}
